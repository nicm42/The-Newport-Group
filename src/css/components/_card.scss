@use '../general/variables';
@use '../general/mixins';

.cards {
  margin-top: 2em;
  margin-bottom: -5vw;
  padding-bottom: calc(5vw + 1em);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2em;
  background-color: variables.$alternate-colour;
  clip-path: polygon(0 0, 100% 0, 100% calc(100% - 5vw), 0% 100%);

  @include mixins.breakpoint-up(large) {
    flex-direction: row;
    justify-content: space-around;
    gap: 0;
  }

  @supports not (gap: 2em) {
    &__card:not(:last-of-type) {
      margin-bottom: 2em;
    }
  }

  &__card {
    width: 15em;
    max-width: calc(100% - 2em);
    height: 20em;
    border-radius: 0.25em;
    box-shadow: 0.25em 0.25em 0.25em rgba(0, 0, 0, 0.25);
    transform: translateY(-50%);
    opacity: 0;
    transition: transform variables.$transition-time variables.$easing,
      opacity variables.$transition-time variables.$easing;

    &.slide {
      transform: translateY(0);
      opacity: 1;
    }

    //If they're below each other, but have space offset them a bit
    @include mixins.breakpoint-up(medium) {
      &:nth-of-type(2).slide {
        transform: translateY(0) translateX(2em);
      }

      &:last-of-type.slide {
        transform: translateY(0) translateX(4em);
      }
    }

    //If they're next to each other, then also make them diagonal
    @include mixins.breakpoint-up(large) {
      &:first-of-type.slide {
        transform: translateY(2em) translateX(0);
      }

      &:nth-of-type(2).slide {
        transform: translateY(1em) translateX(0);
      }

      &:last-of-type.slide {
        transform: translateY(0) translateX(0);
      }
    }
  }

  &__image {
    height: 50%;
  }

  &__text {
    height: 50%;
    display: grid;
    place-content: center;
  }

  &__button {
    position: relative;
    border: none;
    padding: 0.5em 1em;
    border-radius: 0.25em;
    background-color: variables.$secondary-colour;
    color: variables.$alternate-colour;
    box-shadow: 0.25em 0.25em 0.25em rgba(0, 0, 0, 0.25);
    cursor: pointer;

    &::after {
      position: absolute;
      content: '';
      background-color: variables.$alternate-colour;
      height: 125%;
      width: 1em;
      left: -20%;
      top: -10%;
      opacity: 0.25;
      transform: rotate(35deg);
      transition: left variables.$transition-time variables.$easing,
        opacity 100ms variables.$easing variables.$transition-time;
    }

    &:hover::after,
    &:focus::after {
      left: 110%;
      opacity: 0;
    }

    &:hover,
    &:focus {
      background-color: adjust-color(
        $color: variables.$secondary-colour,
        $lightness: 10%
      );
    }

    &:active {
      transform: translateX(0.25em) translateY(0.25em);
      box-shadow: unset;
    }
  }
}
